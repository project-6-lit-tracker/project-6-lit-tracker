{"version":3,"sources":["firebase.js","Components/Header.js","Components/SearchBar.js","Components/Main.js","Components/Footer.js","Components/SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","Component","convert","require","SearchBar","handleChange","e","setState","searchInput","target","value","console","log","handleFormSubmit","preventDefault","axios","url","responseType","paramsSerializer","params","Qs","stringify","arrayFormat","reqUrl","key","method","q","state","proxyHeaders","xmlToJSON","then","res","userSearchResults","condensedRes2","xml2js","data","compact","spaces","elements","userSearchRes","map","book","push","title","text","author","undefined","rating","imageUrl","books","userBooks","className","action","onSubmit","this","htmlFor","type","placeholder","id","name","aria-label","required","onChange","Main","Footer","href","rel","tabIndex","aria-hidden","alt","SearchResults","props","App","userLibrary","booksToRead","database","ref","on","response","val","bookResults","condensedRes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e384d9e.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase';\n\n// Initialize Firebase\n// USE YOUR CONFIG OBJECT\nconst config = {\n    apiKey: \"AIzaSyD_3aQWQ3rO4YJO5R7EHj1v8Q6gfjAJaWk\",\n    authDomain: \"project-6-lit-tracker.firebaseapp.com\",\n    databaseURL: \"https://project-6-lit-tracker.firebaseio.com\",\n    projectId: \"project-6-lit-tracker\",\n    storageBucket: \"project-6-lit-tracker.appspot.com\",\n    messagingSenderId: \"739658073151\",\n    appId: \"1:739658073151:web:e487069fdf5b98da14648a\"\n};\nfirebase.initializeApp(config);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n\n    constructor (){\n        super();\n    }\n\n    render (){\n        return (\n            <header>\n\n                <h1>Lit Tracker</h1>\n\n            </header>\n            // stuff \n        )\n    }\n\n  } \n\n\n\nexport default Header;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Qs from 'qs';\nconst convert = require('xml-js');\n\n\nclass SearchBar extends Component {\n    constructor (){\n        super ();\n\n        this.state = {\n            userBooks: [],\n            searchInput: \"\",\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            searchInput: e.target.value,\n        })\n        console.log(e.target.value);\n    }\n    \n    handleFormSubmit = (e) => {\n        e.preventDefault();\n    \n        axios ({\n            url: 'https://proxy.hackeryou.com',\n    \n            responseType: '',\n    \n    // paramsSerializer allows us to pass query params into axios call\n            paramsSerializer: function (params) {\n                return Qs.stringify(params, {arrayFormat: 'brackets'})\n            },\n    \n            params: {\n                reqUrl: \"https://www.goodreads.com/search/index.xml\",\n            \n                params : {\n                    key: '14csXzY0xdicnCrXfQSO1w',\n                    method: \"search_index\",\n                    q: this.state.searchInput,\n                },\n            \n                proxyHeaders: {\n                    'Access-Control-Allow-Origin': \"https://proxy.hackeryou.com\"\n                }\n            },\n    \n            xmlToJSON: false\n\n    }).then ((res) => {\n    // Convert XML to JS Object\n        const userSearchResults = [];\n\n        const result3 = convert.xml2js(res.data, {compact: false, spaces: 2});\n        \n        const condensedRes2 = result3.elements[0].elements[1].elements[6].elements;\n\n        \n        \n        const userSearchRes = [...condensedRes2];\n        console.log(userSearchRes);\n\n    // Push search results into empty array\n        userSearchRes.map(book => {\n\n            return (\n                userSearchResults.push({\n                    title: book.elements[8].elements[1].elements[0].text,\n\n                    author: book.elements[8].elements[2].elements[1].elements[0].text === undefined \n                    ? \"\" \n                    : book.elements[8].elements[2].elements[1].elements[0].text,\n\n                    key: book.elements[8].elements[0].elements[0].text,\n\n                    rating: book.elements[7].elements[0].text,\n\n                    imageUrl: book.elements[8].elements[3].elements[0].text === undefined ? \"/src/assets/noCover.jpg\"\n                    : book.elements[8].elements[3].elements[0].text,\n                })\n            );\n        })\n    \n    // Store searched books\n        this.setState({\n            books: userSearchResults,\n        })\n        console.log(userSearchResults);\n\n\n\n        \n    })\n    \n    // Clear search input\n        this.setState({\n            searchInput: \"\",\n        })\n\n    \n    }\n\n\n    render (){\n        return ( \n                <div className=\"wrapper\">\n\n                    <form action=\"submit\" onSubmit={this.handleFormSubmit}>\n\n                        <label\n                        className=\"sr-only\"\n                        htmlFor=\"search\">\n                        </label>\n\n                        <input \n                        type=\"search\" \n                        placeholder=\"Search by title or author\"\n                        id= \"search\"\n                        name=\"search\"\n                        aria-label=\"Search through site content\"\n                        title=\"Search by title or author\"\n                        required\n                        onChange={this.handleChange}\n                        value={this.state.searchInput}>\n                        </input>\n\n                    <button type=\"submit\">Search</button>\n\n                    </form>\n\n                </div>\n        );\n    }\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport SearchBar from './SearchBar';\n\n\nclass Main extends Component {\n\n    constructor (){\n\n        super();\n    }\n\n    render(){\n\n        return(\n            \n            <main>\n                <SearchBar />\n            </main>\n            \n        );\n    }\n\n\n\n}\n\nexport default Main;","import React from 'react';\n\nconst Footer = () => {\n    return (\n    <footer>\n\n        <p className=\"footer-text\">\n            2020 Juno College\n\n            <a href=\"http://www.afuadeborahcodes.com/\"\n            className=\"footer-link\"\n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            tabIndex=\"0\"\n            aria-hidden=\"true\"\n            title=\"afuadeborahcodes.com\"\n            alt=\"Go to Afua's page.\"\n            >Afua Frimpong </a>\n\n            <a href=\"http://claudiaahn.com/\"\n            className=\"footer-link\"\n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            tabIndex=\"0\"\n            aria-hidden=\"true\"\n            title=\"claudiaahn.com\"\n            alt=\"Go to Claudia's page\"\n            >Claudia Ahn </a>\n\n            <a href=\"http://fabiodwyer.com/\"\n            className=\"footer-link\"\n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            tabIndex=\"0\"\n            aria-hidden=\"true\"\n            title=\"fabiodwyer.com\"\n            alt=\"Go to Fabio's page\"\n            >Fabio Dwyer </a>\n\n\n            <a href=\"https://www.linkedin.com/in/jacqueline-nosal/\"\n            className=\"footer-link\"\n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            tabIndex=\"0\"\n            aria-hidden=\"true\"\n            title=\"Jacqui Nosal on Linked\"\n            alt=\"Go to Jacqui's page\"\n            >Jacqui Nosal </a>\n        </p>\n\n    </footer>\n    )\n}\n\n\nexport default Footer ","import React, { Component } from 'react';\n// import Header from './Header';\nimport Footer from './Footer';\n\nclass SearchResults extends Component {\n    constructor(props){\n        super(props);\n    }\n\n\n    render(){\n        return(\n            <div className=\"second-page\">\n                {/* <Header /> */}\n                <div className=\"search-results-container\">\n\n                    <div className=\"search-results\">\n                        \n                        <h2>Search Results</h2>\n\n                        <div className=\"book-container\">\n                            <div>\n                            </div>\n\n                            <div>\n                            </div>\n\n                            <div>\n                            </div>\n\n                            <div>\n                            </div>\n                        </div>\n\n                    </div>\n\n                    <div className=\"make-a-list\">\n                        <div className=\"to-read\">\n                            <h2>2020 To-Read </h2>\n                        </div>\n                    </div>\n\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nexport default SearchResults;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport './App.css';\nimport axios from 'axios';\nimport Qs from 'qs';\n\nimport Header from './Components/Header';\nimport Main from './Components/Main';\nimport Footer from './Components/Footer';\nimport SearchResults from './Components/SearchResults';\nconst convert = require('xml-js');\n\n\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      books: [],\n      // Main axios API info\n\n      // searchInput: \"\",\n      // User search input for SearchBar\n\n      userLibrary: [],\n      // User selected from API books\n      // Firebase\n\n      booksToRead: [],\n      // User selected books to read later on\n      // Firebase \n\n    }\n  }\n  \n  componentDidMount(){\n    // firebase \n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      console.log(response.val());\n    });\n\n    // API\n    axios ({\n      url: 'https://proxy.hackeryou.com',\n\n      responseType: '',\n\n      // paramsSerializer allows us to pass query params into axios call\n      paramsSerializer: function (params) {\n        return Qs.stringify(params, {arrayFormat: 'brackets'})\n      },\n\n      params: {\n        reqUrl: \"https://www.goodreads.com/search/index.xml\",\n        \n        params : {\n          key: '14csXzY0xdicnCrXfQSO1w',\n          method: \"search_index\",\n          q: \"Lord of the Rings\"\n        },\n        \n        proxyHeaders: {\n          'Access-Control-Allow-Origin': \"https://proxy.hackeryou.com\"\n        }\n      },\n\n      xmlToJSON: false\n    }).then((res) => {\n      const bookResults = [];\n\n      const result2 = convert.xml2js(res.data, {compact: false, spaces: 2});\n      \n      const condensedRes = result2.elements[0].elements[1].elements[6].elements;\n    \n\n      const newRes = [...condensedRes];\n      // console.log(newRes)  // const condensedRes = result2.elements[0].elements[1].elements[6].elements[0].elements[8].elements;\n\n\n      // Grab individual book information from API \n      newRes.map((book) => {\n\n        return (\n          bookResults.push({\n            title: book.elements[8].elements[1].elements[0].text,\n\n            author: book.elements[8].elements[2].elements[1].elements[0].text,\n\n            key: book.elements[8].elements[0].elements[0].text,\n\n            rating: book.elements[7].elements[0].text,\n            \n            imageUrl: book.elements[8].elements[3].elements[0].text\n          })\n        );\n      })\n    \n        console.log(bookResults);\n\n      this.setState({\n        books: bookResults\n      })\n\n    })\n\n\n  }\n\n  \n  // Create a method to capture state on submit and pass it SearchBar component as a prop\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <ul>\n          {this.state.books.map((book) => {        \n            return <li>{book}</li>\n          })}\n        </ul> */}\n        {/* Firebase Setup */}\n        <Header />\n\n        <Main/>\n        <Footer/>\n\n        <SearchResults />\n        \n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n\n\n// SearchBar will be a grandchild component with a changing state\n  // In <Main/> it will render the home page \"/\" with the background image\n  // In <Header/> it will render on each page on the yellow background\n// SearchBar will have a state that will change based on the values we pass into it on search\n  // e.target.value\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}