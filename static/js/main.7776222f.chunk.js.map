{"version":3,"sources":["firebase.js","Components/Header.js","Components/Main.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","convert","require","Main","props","handleFirebaseChange","eventFb","setState","fbSearchInput","target","value","console","log","handleFirebaseSubmit","preventDefault","dbUserList","database","ref","pushListObj","name","state","books","push","addBookToList","list","bookToAdd","key","bookToAddObj","title","read","undefined","set","removeList","listName","Swal","fire","text","type","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","child","remove","handleChange","e","searchInput","handleFormSubmit","confirmSubmit","done","axios","url","responseType","paramsSerializer","params","Qs","stringify","arrayFormat","reqUrl","method","q","_limit","proxyHeaders","xmlToJSON","res","userSearchResults","condensedRes2","xml2js","data","compact","spaces","elements","map","book","author","rating","imageUrl","userBooks","scrollToMyRef","myRef","window","scrollTo","current","offsetTop","React","createRef","createList","on","response","val","newState","listInfo","className","action","onSubmit","this","htmlFor","placeholder","id","aria-label","onChange","color","currentBook","src","alt","onClick","required","index","disabled","selectIndex","length","Component","Footer","href","rel","tabIndex","aria-hidden","App","userLibrary","booksToRead","bookResults","result2","condensedRes","newRes","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7776222f.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase';\n\n// Initialize Firebase\n// USE YOUR CONFIG OBJECT\nconst config = {\n    apiKey: \"AIzaSyD_3aQWQ3rO4YJO5R7EHj1v8Q6gfjAJaWk\",\n    authDomain: \"project-6-lit-tracker.firebaseapp.com\",\n    databaseURL: \"https://project-6-lit-tracker.firebaseio.com\",\n    projectId: \"project-6-lit-tracker\",\n    storageBucket: \"project-6-lit-tracker.appspot.com\",\n    messagingSenderId: \"739658073151\",\n    appId: \"1:739658073151:web:e487069fdf5b98da14648a\"\n};\nfirebase.initializeApp(config);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;\n","import React from 'react';\n\nconst Header = () => {\n\n    return(\n\n        <header>\n\n            <h1>Lit Tracker</h1>\n\n        </header>\n\n    )   \n   \n}\n\n\n\nexport default Header;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Qs from 'qs';\nimport { FaStar, FaTimesCircle, FaTimes }  from 'react-icons/fa';\nimport firebase from 'firebase';\nimport ReactLoading from \"react-loading\";\nimport Swal from \"sweetalert2\";\nconst convert = require('xml-js');\n\n\nclass Main extends Component {\n\n    constructor (props){\n\n        super();\n        \n        this.myRef = React.createRef()\n        \n        this.state = {\n            userBooks: [],\n            // User searched books\n            searchInput: \"\",\n            // Grab user axios search value\n            fbSearchInput: \"\",\n            // Grab user Firebase search value\n            createList: [],\n            // User selected books for personal lists\n            done: true\n            // Setting state for the preloader\n        }\n    }\n\n// Firebase\ncomponentDidMount(){\n// Create a variable that holds a reference to our database\n    const dbRef = firebase.database().ref();\n\n// here we add an event listener to that variable that will fire every time there is a change in the database\n\n// this event listener takes a callback function which we will use to get our data from the database and call it response\n\n    dbRef.on('value', (response) => {\n\n// here we use Firebase's .val() method to parse our database info the way we want it\n    const data = response.val();\n\n    const newState = [];\n    \n        for (let key in data){\n            console.log(data[key]);\n\n        const listInfo = {\n            key: key,\n            name: data[key].name,\n            books: data[key].books,\n        }\n        \n        newState.push(listInfo);\n\n    }\n\n  // Change the Initial State\n    this.setState({\n        createList: newState,\n        fbSearchInput: ''\n    })\n    console.log(newState.books);\n\n    console.log(response.val());\n    \n    })\n}\n\n// Thank you to Sherry fir assistance here\n\n// Create List Handler\n    handleFirebaseChange = (eventFb) => {\n        this.setState({\n            fbSearchInput: eventFb.target.value,\n        })\n        console.log(eventFb.target.value);\n    }\n\n// Firebase Form Submit\n    handleFirebaseSubmit = (eventFb) => {\n        eventFb.preventDefault();\n\n        const dbUserList = firebase.database().ref();\n\n        const pushListObj = {\n            name: this.state.fbSearchInput,\n            books: [],\n        }\n\n        const pushList = dbUserList.push(pushListObj);\n        \n        this.setState({\n            fbSearchInput: '',\n        })\n\n    }\n\n// Add books from API to user created lists\n    addBookToList = (list, bookToAdd) => {\n\n    \n        console.log(list, bookToAdd);\n\n        const dbUserList = firebase.database().ref(list.key);\n\n        const bookToAddObj = {\n\n            title: bookToAdd,\n            read: false \n        }\n        \n        console.log(list.books);\n\n        if (list.books === undefined){\n            list.books = [];\n            list.books.push(bookToAddObj);\n          \n            dbUserList.set(list);\n\n        } else {\n\n            list.books.push(bookToAddObj);\n            dbUserList.set(list);\n        }\n\n    }\n    \n\n// Firebase Removal \n    removeList = (listName) => {\n        \n        Swal.fire({\n            title: \"Are you sure?\",\n            text: \"You won't be able to revert this!\",\n            type: \"warning\",\n            showCancelButton: true,\n            confirmButtonColor: \"#CCCC97\",\n            cancelButtonColor: \"#E76155\",\n            confirmButtonText: \"Yes, delete it!\"\n        }).then(result => {\n            if(result.value) {\n                const dbRef = firebase.database().ref();\n                dbRef.child(listName).remove();\n            }\n        });\n    };\n\n// Remove selected books from user lists\n    // removeBook = (bookName, titleObject ) => {\n    //     let bookKey;\n    //     // const removeMe = bookKey[0].books[0].title;\n    //     const userBook = this.state.createList;\n    //     const userBookCopy = [...userBook];\n\n    //     console.log(userBookCopy[0].books);\n        \n    //     for(book in userBookCopy){\n    //         if (userBookCopy[book] === bookName.key){\n\n    //         }\n    //     }\n    //     // console.log(removeMe);\n    \n    //     // const dbUserList = firebase.database().ref();\n\n    //     // dbUserList.child(bookKey).remove();\n    // }\n    // Thank you to Sui and Opjot for help here\n    // Gave many tries, but could not acces the nested books object. As result, the x icon beside each book is decorative. Would appreciate some feeback here, thank you.\n\n// Second axios Search Handler\n    handleChange = (e) => {\n        this.setState({\n            searchInput: e.target.value,\n        })\n       \n    }\n\n\n// Second axios Form Submit\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        // Error handling:\n            this.state.searchInput\n                ?\n            // axios call if complete\n                    this.confirmSubmit()\n                :\n        // if either is falsy, \"\", produce\n        // Sweet alert for no input\n            Swal.fire({\n                title: 'Please search a book.',\n                confirmButtonColor: \"#CCCC97\",\n            })\n    }\n\n    confirmSubmit = () => {\n    // Setting state for the preloader\n\n        this.setState({\n            done: false\n        })\n        axios ({\n            url: 'https://proxy.hackeryou.com',\n    \n            responseType: '',\n    \n    // paramsSerializer allows us to pass query params into axios call\n            paramsSerializer: function (params) {\n                return Qs.stringify(params, {arrayFormat: 'brackets'})\n            },\n    \n            params: {\n                reqUrl: \"https://www.goodreads.com/search/index.xml\",\n            \n                params : {\n                    key: '14csXzY0xdicnCrXfQSO1w',\n                    method: \"search_index\",\n                    q: this.state.searchInput,\n                    _limit: 4,\n                },\n            \n                proxyHeaders: {\n                    'Access-Control-Allow-Origin': \"https://proxy.hackeryou.com\"\n                }\n            },\n    \n            xmlToJSON: false\n\n    }).then ((res) => {\n    // Convert XML to JS Object\n        const userSearchResults = [];\n\n        const result3 = convert.xml2js(res.data, {compact: false, spaces: 2});\n        \n        const condensedRes2 = result3.elements[0].elements[1].elements[6].elements;\n\n        \n        \n        const userSearchRes = [...condensedRes2];\n        \n        \n\n    // Push search results into empty array\n        userSearchRes.map(book => {\n\n            return (\n                userSearchResults.push({\n                    title: book.elements[8].elements[1].elements[0].text,\n\n                    author: book.elements[8].elements[2].elements[1].elements[0].text === undefined \n                    ? \"\" \n                    : book.elements[8].elements[2].elements[1].elements[0].text,\n\n                    key: book.elements[8].elements[0].elements[0].text,\n\n                    rating: book.elements[7].elements[0].text,\n\n                    imageUrl: book.elements[8].elements[3].elements[0].text \n                    === undefined ? \"/src/assets/noCover.jpg\"\n                    : book.elements[8].elements[3].elements[0].text,\n                    \n                })\n                );\n            })\n            \n            // Store searched books\n            this.setState({\n                userBooks: userSearchResults,\n            })\n            console.log(userSearchResults);\n            \n        this.scrollToMyRef(this.myRef);\n        })\n    // Setting state for the preloader\n        .then(() => this.setState({ done: true }));\n        \n\n    // Clear search input\n        this.setState({\n            searchInput: \"\",\n        })\n    }\n\n//Function to scroll\n    scrollToMyRef = () => window.scrollTo(0, this.myRef.current.offsetTop);\n\n\n    render(){\n\n        return(\n            \n            <main>\n                <section className=\"landing\">\n                    <div className=\"wrapper\">\n\n                        <form className=\"search-form\" action=\"submit\" onSubmit={this.handleFormSubmit}>\n\n                            <label\n                            className=\"sr-only\"\n                            htmlFor=\"search\">\n                            </label>\n\n                            <input \n                            type=\"search\" \n                            placeholder=\"Search by title or author\"\n                            id= \"search\"\n                            name=\"search\"\n                            aria-label=\"Search through site content\"\n                            title=\"Search by title or author\"\n                            \n                            onChange={this.handleChange}\n                            value={this.state.searchInput}>\n                            </input>\n\n                            <button type=\"submit\">Search</button>\n                            \n                        </form>\n\n                    </div>\n                </section>\n\n                <div className=\"search-results-container\">\n\n                    <section className=\"search-results\">\n                        <h2 ref={this.myRef}>Search Results</h2>\n                        <p>Enter your search above</p>\n                        <div className=\"display-container\">\n                                \n                            {!this.state.done === true ? (<ReactLoading type={\"bars\"} color={\"black\"} className={\"preloader\"}/>) : (this.state.userBooks.map(book =>{\n                                let currentBook = book;\n                                return (\n                                    <div key={book.key} className='book-info'>\n\n                                        <p>{book.title}</p>\n\n                                        <span><p>{book.author} </p></span>\n\n                                        <img \n                                        src={`${book.imageUrl}`} \n                                        alt={`Cover art for ${book.title}`}/>\n\n                                        <div className=\"icon\">\n\n                                            <p>{book.rating}</p><FaStar />\n\n                                        </div>\n\n                                        <div className=\"book-list-container\">\n\n                                            <ul className=\"book-list\">\n                                            {this.state.createList.map(list => {\n                                                return (\n                                                    <li \n                                                    key={list.key}\n\n                                                    onClick={()=> {this.addBookToList(list, currentBook.title)}}>\n\n                                                        <p>Add to {list.name}</p>\n                                                            \n                                                    </li>  \n                                                )\n                                                })}\n                                               \n                                            </ul>\n\n                                        </div>\n\n                                    </div>\n\n                                )\n                        \n                            }))}\n                        </div>\n                        \n                    </section>\n\n                    <section className=\"make-a-list\">\n            \n                        <form className=\"list-form\" action=\"submit\" onSubmit={this.handleFirebaseSubmit}>\n\n                            <label\n                            className=\"sr-only\"\n                            htmlFor=\"create-list\">\n                            </label>\n\n                            <input \n                            type=\"text\" \n                            id= \"create-list\"\n                            aria-label=\"Create personal book list\"\n                            title=\"Create book list\"\n                            required\n                            value={this.state.fbSearchInput}\n                            onChange={this.handleFirebaseChange}>\n                            </input>\n\n                            <button type=\"submit\">Create List</button>\n                            \n                        </form>\n                        \n                        <div className=\"list-background\">\n                            <ul>\n                        \n\n\n                                {this.state.createList.map(list => {\n                                    \n                                    return (\n\n                                      <li key={list.key} className=\"list-title\">\n                                          <div className=\"list-title-icon\">\n                                            <h3>{list.name}</h3>\n                                            <FaTimesCircle onClick={() => {this.removeList(list.key)}}/>\n                                          </div>\n\n                                          {list.books !== undefined ? \n                                          <ul>\n                                              {list.books.map((book, index) => {\n                                                  return (\n                                                    <div className=\"list-title-icon\">\n                                                        <li key={index}>{book.title} \n                                                        </li>\n                                                        <FaTimes/>\n                                                    </div>\n                                                  )\n                                                    \n                                                })}\n                                        \n                                            </ul>\n                                        : null}\n\n                                           \n\n                                      </li>  \n                                    )\n                                })}\n                            </ul>\n\n                        </div>\n                    </section>\n\n                </div>\n\n                <section className=\"progress\">\n                    <div className=\"wrapper progress-container\">\n                        <div className=\"progress-box progress1\">\n                            <form className=\"progress-form\" action=\"submit\">\n                                <label\n                                htmlFor=\"select-list\">\n                                    Select a list to show reading progress\n                                </label>\n                                <div className=\"select-bottom\">\n                                    <select\n                                    id= \"list-select-dropdown\"\n                                    className=\"list-select-dropdown\"\n                                    aria-label=\"Select a list to show reading progress\"\n                                    title=\"Select a list to show reading progress\"\n                                    required\n                                    value={this.state.fbSearchInput}\n                                    onChange={this.handleFirebaseChange}\n                                    >\n                                        <option value=\"\" disabled>Select a List</option>\n                                        {this.state.createList.map((list, selectIndex) => {\n                                            return (\n                                                <option key={selectIndex} value={list.name}>{list.name}</option>\n                                            );\n                                        })}\n                                    </select>\n\n                                    <button type=\"submit\">Show Progress</button>\n                                </div>\n\n                            </form>\n                        </div>\n                        <div className=\"progress-box books-read\">\n                            {/* {this.state.createList.map((index) => {\n                                console.log(this.state.createList)\n                                return ( */}\n                                    <p>0/{this.state.createList.length} Read</p>\n                            {/* {console.log(this.state.createList)}\n                            {console.log(this.state.createList[0])} */}\n                            {/* We realize it's showing the number of lists, not the number of books. There is a layer between the index and books that we will need to work out at a later date. Would love to get some feedback here. */}\n                        </div>\n                    </div>\n                </section>\n\n            </main>\n            \n        );\n    }\n\n\n\n}\n\nexport default Main;\n\n// Click on Add to List, title of the book will populate the placeholder in the list section\n// Goals\n\n// Toggle button class w ternary between true and false \n// onClick={() => {this.removeBook(book.title)}}","import React from 'react';\n\nconst Footer = () => {\n    return (\n    <footer>\n\n        <p className=\"footer-text\">\n            2020 Juno College\n\n            <a href=\"http://www.afuadeborahcodes.com/\"\n            className=\"footer-link\"\n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            tabIndex=\"0\"\n            aria-hidden=\"true\"\n            title=\"afuadeborahcodes.com\" \n            alt=\"Go to Afua's page.\"\n            >Afua Frimpong </a>\n\n            <a href=\"http://claudiaahn.com/\"\n            className=\"footer-link\"\n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            tabIndex=\"0\"\n            aria-hidden=\"true\"\n            title=\"claudiaahn.com\"\n            alt=\"Go to Claudia's page\"\n            >Claudia Ahn </a>\n\n            <a href=\"http://fabiodwyer.com/\"\n            className=\"footer-link\"\n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            tabIndex=\"0\"\n            aria-hidden=\"true\"\n            title=\"fabiodwyer.com\"\n            alt=\"Go to Fabio's page\"\n            >Fabio Dwyer </a>\n\n\n            <a href=\"https://www.linkedin.com/in/jacqueline-nosal/\"\n            className=\"footer-link\"\n            target=\"_blank\" \n            rel=\"noopener noreferrer\" \n            tabIndex=\"0\"\n            aria-hidden=\"true\"\n            title=\"Jacqui Nosal on Linked\"\n            alt=\"Go to Jacqui's page\"\n            >Jacqui Nosal </a>\n        </p>\n\n    </footer>\n    )\n}\n\n\nexport default Footer ","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport './App.css';\nimport axios from 'axios';\nimport Qs from 'qs';\n\n\nimport Header from './Components/Header';\nimport Main from './Components/Main';\nimport Footer from './Components/Footer';\nconst convert = require('xml-js');\n\n\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      books: [],\n      // Main axios API info\n\n      searchInput: \"\",\n      // User search input for SearchBar\n\n      // searchedBooks: \"\",\n\n      userLibrary: [],\n      // User selected from API books\n      // Firebase\n\n      booksToRead: [],\n      // User selected books to read later on\n      // Firebase \n\n    }\n  }\n  \n  componentDidMount(){\n    // firebase \n    // const dbRef = firebase.database().ref();\n    // dbRef.on('value', (response) => {\n    //   console.log(response.val());\n    // });\n\n    // API\n    axios ({\n      url: 'https://proxy.hackeryou.com',\n\n      responseType: '',\n\n      // paramsSerializer allows us to pass query params into axios call\n      paramsSerializer: function (params) {\n        return Qs.stringify(params, {arrayFormat: 'brackets'})\n      },\n\n      params: {\n        reqUrl: \"https://www.goodreads.com/search/index.xml\",\n        \n        params : {\n          key: '14csXzY0xdicnCrXfQSO1w',\n          method: \"search_index\",\n          q: \"Lord of the Rings\"\n        },\n        \n        proxyHeaders: {\n          'Access-Control-Allow-Origin': \"https://proxy.hackeryou.com\"\n        }\n      },\n\n      xmlToJSON: false\n    }).then((res) => {\n      const bookResults = [];\n\n      const result2 = convert.xml2js(res.data, {compact: false, spaces: 2});\n      \n      const condensedRes = result2.elements[0].elements[1].elements[6].elements;\n    \n\n      const newRes = [...condensedRes];\n \n      console.log(result2);\n\n      // Grab individual book information from API \n      newRes.map((book) => {\n\n        return (\n            bookResults.push({\n              title: book.elements[8].elements[1].elements[0].text,\n\n              author: book.elements[8].elements[2].elements[1].elements[0].text,\n\n              key: book.elements[8].elements[0].elements[0].text,\n\n              rating: book.elements[7].elements[0].text,\n              \n              imageUrl: book.elements[8].elements[3].elements[0].text\n            })\n        );\n      })\n    \n        console.log(bookResults);\n\n      this.setState({\n        books: bookResults\n      })\n\n    })\n\n\n  }\n\n\n  \n  \n\n  render() {\n    return (\n      <div className=\"App\">\n \n        <Header />\n\n        <Main />\n        \n        <Footer />\n        \n        \n\n    \n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}